/* 
THIS FILE IS COMPOSED OF 4 PARTS :
---> PROTOTYPES OF THE FUNCTIONS USED
---> TEST FUNCTIONS
---> MAIN PART (where the test-functions are called)
---> COPY OF THE FILE AI_1.c
*/

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <time.h>
#include "../src/interface.h"
#include "../src/server.h"
#include "../src/link.h"
#include "../src/player.h"


struct Player AI_1;
static struct Link **AI_1_matrix;


// Prototypes of the functions used
int AI_1_init_player(int id, int nb_players, int nb_towns, int nb_rails, struct Rail *rails, int nb_initial_wagons, int nb_obj, struct Objective *objs);
struct Action AI_1_play_turn(int *used_wagons, int *cards_in_hand, int *objectives, int nb_new_rails, struct New_rail *changes, int *new_obj, int *cards);
int *AI_1_choose_objective(int nb, int *objs, int min);
int AI_1_free_player();


// TEST FUNCTIONS

void test_initialisation(){
  printf("Test of AI_1_init_player... ");

  // Initialisation
  struct Rail rails[3]={{1,2,5,0},{1,5,8,1},{2,3,1,0}};
  struct Objective objs[2]={{1,5,1000},{1,3,5000}};
  AI_1_init_player(3,4,6,3,rails,42,2,objs);

  // Tests
  assert(AI_1.id_player == 3);
  assert(AI_1.points == 0);
  assert(AI_1.nb_players == 4);
  assert(AI_1.nb_towns == 6);
  for(int i=0; i<4; i++){
    assert(AI_1.nb_remaining_wagons[i] == 42);
    assert(AI_1.nb_remaining_wagon_cards[i] == 0);
    assert(AI_1.nb_remaining_objective_cards[i] == 0);
  }
  assert(AI_1.nb_rails == 3);
  for(int i=0; i<3; i++){
    assert(AI_1.rails[i].town1 == rails[i].town1);  
    assert(AI_1.rails[i].town2 == rails[i].town2); 
    assert(AI_1.rails[i].length == rails[i].length);  
    assert(AI_1.rails[i].color == rails[i].color);
  }
  assert(AI_1.total_nb_obj == 2);
  for(int i=0; i<2; i++){
    assert(AI_1.objs[i].town1 == objs[i].town1);
    assert(AI_1.objs[i].town2 == objs[i].town2);
    assert(AI_1.objs[i].points == objs[i].points);
  }
  assert(AI_1.nb_personal_objs == 0);
  assert(AI_1.nb_objs_completed == 0);
  for(int i=0; i<2; i++)
    assert(AI_1.personal_objs[i] == -1);
  assert(AI_1.nb_personal_wagon_cards == 0);
  assert(AI_1.nb_objectives_chosen == 0);
  assert(AI_1.draw_chosen == 0);
  printf("OK\n");
  AI_1_free_player();
}


void test_game_actualisation_case_objective(){
  printf("test of AI_1_play_turn in case of objectives chosen... ");

  // Initialisation
  struct Rail rails[3]={{1,2,5,0},{1,5,8,1},{2,3,1,0}};
  struct Objective objs[2]={{1,5,1000},{1,3,5000}};
  AI_1_init_player(3,4,6,3,rails,42,2,objs);
  AI_1.nb_objectives_chosen = 1;
  AI_1.nb_colors = 5;
  AI_1.draw_chosen = 0;
  for(int i=0; i<4; i++)
    AI_1.nb_remaining_wagon_cards[i] = 15;
  for(int i=0; i<AI_1.nb_colors; i++)
    AI_1.personal_wagon_cards[i] = 0;
  AI_1.personal_wagon_cards[0] = 8;
  AI_1.personal_wagon_cards[1] = 7;
  AI_1.nb_personal_wagon_cards = 15;

  // Initialisation of play turn
  int used_wagons[4] = {2,0,3,0};
  int cards_in_hand[4] = {-2,2,-3,0};
  int objectives[4] = {0,0,0,1};
  int nb_new_rails = 0;
  struct New_rail *changes = NULL; // uninitialised because length=0
  int new_obj[1] = {1};
  int *cards = NULL; // uninitialised because length=0
 
  AI_1_play_turn(used_wagons,cards_in_hand,objectives,nb_new_rails,changes,new_obj,cards);
  
  // Tests
  assert(AI_1.id_player == 3);
  assert(AI_1.points == 0);
  assert(AI_1.nb_players == 4);
  assert(AI_1.nb_towns == 6);
  assert(AI_1.nb_rails == 3);
  assert(AI_1.total_nb_obj == 2);

  assert(AI_1.nb_remaining_wagons[0] == 40);
  assert(AI_1.nb_remaining_wagons[1] == 42);
  assert(AI_1.nb_remaining_wagons[2] == 39);
  assert(AI_1.nb_remaining_wagons[3] == 42);

  assert(AI_1.nb_remaining_wagon_cards[0] == 13);
  assert(AI_1.nb_remaining_wagon_cards[1] == 17);
  assert(AI_1.nb_remaining_wagon_cards[2] == 12);
  assert(AI_1.nb_remaining_wagon_cards[3] == 15);

  assert(AI_1.nb_personal_objs == 1);
  assert(AI_1.objs[AI_1.personal_objs[0]].town1 == 1);
  assert(AI_1.objs[AI_1.personal_objs[0]].town2 == 3);
  assert(AI_1.objs[AI_1.personal_objs[0]].points == 5000);
  
  assert(AI_1.nb_personal_wagon_cards == 15);
  assert(AI_1.personal_wagon_cards[0] == 8);
  assert(AI_1.personal_wagon_cards[1] == 7);
  assert(AI_1.personal_wagon_cards[2] == 0);
  assert(AI_1.personal_wagon_cards[3] == 0);
  assert(AI_1.personal_wagon_cards[4] == 0);

  printf("OK\n");
  AI_1_free_player();
}

void test_game_actualisation_case_build(){
  printf("test of AI_1_play_turn in case of build chosen... ");

  // Initialisation
  struct Rail rails[3]={{1,2,5,0},{1,5,7,1},{2,3,3,0}};
  struct Objective objs[2]={{1,5,1000},{1,3,5000}};
  AI_1_init_player(3,4,6,3,rails,42,2,objs);
  AI_1.nb_objectives_chosen = 0;
  AI_1.nb_colors = 5;
  AI_1.draw_chosen = 0;
  for(int i=0; i<4; i++)
    AI_1.nb_remaining_wagon_cards[i] = 15;
  for(int i=0; i<AI_1.nb_colors; i++)
    AI_1.personal_wagon_cards[i] = 0;
  AI_1.personal_wagon_cards[0] = 8;
  AI_1.personal_wagon_cards[1] = 7;
  AI_1.nb_personal_wagon_cards = 15;

  // Initialisation of play turn
  int used_wagons[4] = {0,0,3,7};
  int cards_in_hand[4] = {1,2,-3,-7};
  int objectives[4] = {1,0,0,0};
  int nb_new_rails = 2;
  struct New_rail changes[2] = {{1,3},{2,2}};
  int *new_obj = NULL; // uninitialised because length=0
  int cards[7] = {1,1,1,1,1,1,1};
  
  AI_1_play_turn(used_wagons,cards_in_hand,objectives,nb_new_rails,changes,new_obj,cards);
  
  // Tests
  assert(AI_1.id_player == 3);
  assert(AI_1.points == 0);
  assert(AI_1.nb_players == 4);
  assert(AI_1.nb_towns == 6);
  assert(AI_1.nb_rails == 3);
  assert(AI_1.total_nb_obj == 2);

  assert(AI_1.nb_remaining_wagons[0] == 42);
  assert(AI_1.nb_remaining_wagons[1] == 42);
  assert(AI_1.nb_remaining_wagons[2] == 39);
  assert(AI_1.nb_remaining_wagons[3] == 35);

  assert(AI_1.nb_remaining_wagon_cards[0] == 16);
  assert(AI_1.nb_remaining_wagon_cards[1] == 17);
  assert(AI_1.nb_remaining_wagon_cards[2] == 12);
  assert(AI_1.nb_remaining_wagon_cards[3] == 8);

  assert(AI_1.nb_personal_objs == 0);
  
  assert(AI_1.nb_personal_wagon_cards == 8);
  assert(AI_1.personal_wagon_cards[0] == 8);
  assert(AI_1.personal_wagon_cards[1] == 0);
  assert(AI_1.personal_wagon_cards[2] == 0);
  assert(AI_1.personal_wagon_cards[3] == 0);
  assert(AI_1.personal_wagon_cards[4] == 0);
 
  assert(AI_1_matrix[1][5].tab_rails[0].id_player == 3);
  assert(AI_1_matrix[2][3].tab_rails[0].id_player == 2);

  printf("OK\n");
  AI_1_free_player();
}


void test_game_actualisation_case_draw(){
   printf("test of AI_1_play_turn in case of draw chosen... ");

  // Initialisation
  struct Rail rails[3]={{1,2,5,0},{1,5,8,1},{2,3,1,0}};
  struct Objective objs[2]={{1,5,1000},{1,3,5000}};
  AI_1_init_player(3,4,6,3,rails,42,2,objs);
  AI_1.nb_objectives_chosen = 0;
  AI_1.nb_colors = 5;
  AI_1.draw_chosen = 1;
  for(int i=0; i<4; i++)
    AI_1.nb_remaining_wagon_cards[i] = 15;
  for(int i=0; i<AI_1.nb_colors; i++)
    AI_1.personal_wagon_cards[i] = 0;
  AI_1.personal_wagon_cards[0] = 8;
  AI_1.personal_wagon_cards[1] = 7;
  AI_1.nb_personal_wagon_cards = 15;

  // Initialisation of play turn
  int used_wagons[4] = {2,0,3,0};
  int cards_in_hand[4] = {-2,2,-3,3};
  int objectives[4] = {0,0,0,0};
  int nb_new_rails = 0;
  struct New_rail *changes = NULL; // uninitialised because length=0
  int *new_obj = NULL; // uninitialised because length=0
  int cards[3] = {0,1,4};
  AI_1_play_turn(used_wagons,cards_in_hand,objectives,nb_new_rails,changes,new_obj,cards);

  // Tests
  assert(AI_1.id_player == 3);
  assert(AI_1.points == 0);
  assert(AI_1.nb_players == 4);
  assert(AI_1.nb_towns == 6);
  assert(AI_1.nb_rails == 3);
  assert(AI_1.total_nb_obj == 2);

  assert(AI_1.nb_remaining_wagons[0] == 40);
  assert(AI_1.nb_remaining_wagons[1] == 42);
  assert(AI_1.nb_remaining_wagons[2] == 39);
  assert(AI_1.nb_remaining_wagons[3] == 42);

  assert(AI_1.nb_remaining_wagon_cards[0] == 13);
  assert(AI_1.nb_remaining_wagon_cards[1] == 17);
  assert(AI_1.nb_remaining_wagon_cards[2] == 12);
  assert(AI_1.nb_remaining_wagon_cards[3] == 18);

  assert(AI_1.nb_personal_objs == 0);
  
  assert(AI_1.nb_personal_wagon_cards == 18);
  assert(AI_1.personal_wagon_cards[0] == 9);
  assert(AI_1.personal_wagon_cards[1] == 8);
  assert(AI_1.personal_wagon_cards[2] == 0);
  assert(AI_1.personal_wagon_cards[3] == 0);
  assert(AI_1.personal_wagon_cards[4] == 1);

  printf("OK\n");
  AI_1_free_player();
}



void test_actualise_nb_objs_completed(){
  printf("Test of actualise_nb_objs_completed... ");

  // Initialisation
  struct Rail rails[4]={{2,1,1,0},{2,5,1,1},{3,2,1,0},{4,1,1,3}};
  struct Objective objs[5]={{3,1,32},{1,5,57},{1,3,53},{4,2,42}};
  AI_1_init_player(3,4,6,4,rails,42,4,objs);
  AI_1.nb_objectives_chosen = 0;
  AI_1.nb_colors = 5;
  AI_1.draw_chosen = 0;
  for(int i=0; i<4; i++)
    AI_1.nb_remaining_wagon_cards[i] = 15;
  for(int i=0; i<AI_1.nb_colors; i++)
    AI_1.personal_wagon_cards[i] = 0;
  AI_1.personal_wagon_cards[0] = 8;
  AI_1.personal_wagon_cards[1] = 7;
  AI_1.nb_personal_wagon_cards = 15;

  // Initialisation of play_turn
  int used_wagons[4] = {0,0,0,3};
  int cards_in_hand[4] = {0,0,0,-3};
  int objectives[4] = {0,0,0,0};
  int nb_new_rails = 3; 
  struct New_rail changes[3] ={{0,3},{3,3},{1,3}}; 
  int *new_obj = NULL; // uninitialised because length=0
  int cards[4] = {0,0,0};

  // Initialisation of personal objectives
  AI_1.nb_personal_objs = 4;
  AI_1.nb_objs_completed = 0;
  AI_1.personal_objs[0] = 3;
  AI_1.personal_objs[1] = 0;
  AI_1.personal_objs[2] = 1;
  AI_1.personal_objs[3] = 2;

  AI_1_play_turn(used_wagons,cards_in_hand,objectives,nb_new_rails,changes,new_obj,cards);

  // Tests
  assert(AI_1.nb_personal_objs == 4);
  assert(AI_1.personal_objs[0] == 3);
  assert(AI_1.personal_objs[1] == 0);
  assert(AI_1.personal_objs[2] == 1);
  assert(AI_1.personal_objs[3] == 2);
  assert(AI_1.nb_objs_completed == 1);
  // The player owns all the objective cards
  // He has set 3 rails: of indices 0, 1 and 3
  // He has realised 2 objectives: of indices 1 and 3
  // He tries to complete them in order, so he considers that he has only completed 1 objective
  
  printf("OK\n");
  AI_1_free_player();
}


void test_choose_objective(){
  printf("Test of choose_objective... ");
  
  // Initialisation
  struct Rail rails[4]={{2,1,1,0},{2,5,1,1},{3,2,1,0},{4,1,1,3}};
  struct Objective objs[5]={{3,1,10},{1,5,3},{1,3,500},{4,2,20}};
  AI_1_init_player(3,4,6,4,rails,42,4,objs);
  AI_1.nb_objectives_chosen = 0;
  AI_1.nb_colors = 5;
  AI_1.draw_chosen = 0;
  for(int i=0; i<4; i++)
    AI_1.nb_remaining_wagon_cards[i] = 15;
  for(int i=0; i<AI_1.nb_colors; i++)
    AI_1.personal_wagon_cards[i] = 0;
  AI_1.personal_wagon_cards[0] = 8;
  AI_1.personal_wagon_cards[1] = 7;
  AI_1.nb_personal_wagon_cards = 15;

  // Initialisation of choose_objective
  int objs_proposed[3] = {2,1,3};
  int nb = 3;
  int min_to_choose = 2;
  int *p = AI_1_choose_objective(nb,objs_proposed,min_to_choose);

  // Tests
  assert(p[0] == 0);
  assert(p[1] == 1);
  assert(p[2] == 1);
  
  free(p);
  printf("OK\n");
  AI_1_free_player();
}




// Main function
int main(){
  test_initialisation();
  test_game_actualisation_case_objective();
  test_game_actualisation_case_build();
  test_game_actualisation_case_draw();
  test_actualise_nb_objs_completed();
  test_choose_objective();
  return 0;
}








// COPY OF THE FILE AI_1.c


int give_size_accessible_rails(struct Rail *tab, int size, int id){
  int k = 0;
  struct My_Rail *my_rail;
  for(int i=0; i<size; i++){
    my_rail = give_my_rail(i, AI_1_matrix, tab);
    if(my_rail->id_player==-1 || my_rail->id_player==id)
      k++;
  }
  return k;
}



void accessible_rails(struct Rail *tab, int *tab_indices, int size, int id){
  struct My_Rail *my_rail;
  for(int i=0; i<size; i++){
    my_rail = give_my_rail(i, AI_1_matrix, tab);
    if(my_rail->id_player==-1 || my_rail->id_player==id){
      tab_indices[i] = 1;
    }
  }
}



void sort_length(struct Rail *tab, int *tab_indices, int size){
  for(int i=0; i<size; i++){
    int min = tab[i].length;
    int ind_min = i;
    for(int j=i; j<size; j++){
      if(tab[j].length<min){
        min = tab[j].length;
        ind_min = j;
      }
    }
    struct Rail rail = {tab[i].town1, tab[i].town2, tab[i].length, tab[i].color};
    int k = tab_indices[i];
    tab[i].town1 = tab[ind_min].town1;
    tab[i].town2 = tab[ind_min].town2;
    tab[i].length = tab[ind_min].length;
    tab[i].color = tab[ind_min].color;
    tab_indices[i] = tab_indices[ind_min];
    tab[ind_min].town1 = rail.town1;
    tab[ind_min].town2 = rail.town2;
    tab[ind_min].length = rail.length;
    tab[ind_min].color = rail.color;
    tab_indices[ind_min] = k;
  }
}



void AI_1_fill_tab_accessible(int *tab_to_fill, int current_town, int id){ 
  tab_to_fill[current_town] = 1;
  for(int i=0; i<AI_1.nb_rails; i++){
    int town1 = AI_1.rails[i].town1;
    int town2 = AI_1.rails[i].town2;
    struct My_Rail *my_rail = give_my_rail(i,AI_1_matrix,AI_1.rails);
    if(my_rail->id_player == id && town1 == current_town && tab_to_fill[town2]==0)
      AI_1_fill_tab_accessible(tab_to_fill,town2,id);
    if(my_rail->id_player == id && town2 == current_town && tab_to_fill[town1]==0)
      AI_1_fill_tab_accessible(tab_to_fill,town1,id);
  }
}



int AI_1_objective_realised(int town1, int town2, int id){
  int towns_accessible_left[AI_1.nb_towns+1];
  int towns_accessible_right[AI_1.nb_towns+1];
  for(int i=1; i<AI_1.nb_towns+1; i++){
    towns_accessible_left[i] = 0;
    towns_accessible_right[i] = 0;
  }
  AI_1_fill_tab_accessible(towns_accessible_left,town1,id);
  AI_1_fill_tab_accessible(towns_accessible_right,town2,id);
  int realised = 0;
  for(int i=1; i<AI_1.nb_towns+1; i++){
    if(towns_accessible_left[i]==1 && towns_accessible_right[i]==1)
      realised = 1;
  } 
  return realised;
} 



void actualise_all_parameters_received(int *used_wagons, int *cards_in_hand, int *objectives, int nb_new_rails, struct New_rail *changes, int *new_obj, int *cards){
    // Actualisation of the matrix with the tabular "changes"
    for(int i=0; i<nb_new_rails; i++){
      struct My_Rail *my_rail = give_my_rail(changes[i].rail, AI_1_matrix, AI_1.rails);
      set_player_on_rail(my_rail, changes[i].player);
    }


    // Actualisation of all player's parameters
    for(int i=0; i<AI_1.nb_players; i++){
      AI_1.nb_remaining_wagons[i] -= used_wagons[i];
      AI_1.nb_remaining_wagon_cards[i] += cards_in_hand[i];
      AI_1.nb_remaining_objective_cards[i] += objectives[i];
    }

    // Actualisation of own objectives
    for(int i=0; i<AI_1.nb_objectives_chosen; i++){
      AI_1.personal_objs[AI_1.nb_personal_objs] = new_obj[i];
      AI_1.nb_personal_objs++;
    }

    // Actualisation of own cards
  if(AI_1.draw_chosen == 1){ // case draw
    for(int i=0; i<cards_in_hand[AI_1.id_player]; i++){
      AI_1.nb_personal_wagon_cards++;
      for(int j=0; j<AI_1.nb_colors; j++){
	if(cards[i]==j)
	  AI_1.personal_wagon_cards[j]++;
      }
    }
  }
  if(cards_in_hand[AI_1.id_player]<0){ // case build
    for(int i=0; i<(0-cards_in_hand[AI_1.id_player]); i++){
      AI_1.nb_personal_wagon_cards--;
      for(int j=0; j<AI_1.nb_colors; j++){
	if(cards[i]==j)
	  AI_1.personal_wagon_cards[j]--;
      }
    }
  }
    
    // Actualisation of number of own objectives completed
  int realised = 1;
  while(realised){
    int town1 = AI_1.objs[AI_1.personal_objs[AI_1.nb_objs_completed]].town1;
    int town2 = AI_1.objs[AI_1.personal_objs[AI_1.nb_objs_completed]].town2;
    realised = AI_1_objective_realised(town1,town2,AI_1.id_player);
    if(realised)
      AI_1.nb_objs_completed++;
  }
}




void fill_tab_acyclic(struct Rail *tab, int size, int *tab_to_fill, int current_town){
  tab_to_fill[current_town] = 1;
  for(int i=0; i<size; i++){
    if(tab[i].town1==current_town && tab_to_fill[tab[i].town2]==0)
      fill_tab_acyclic(tab,size,tab_to_fill,tab[i].town2);
    if(tab[i].town2==current_town && tab_to_fill[tab[i].town1]==0)
      fill_tab_acyclic(tab,size,tab_to_fill,tab[i].town1);
  }
}



int acyclic(struct Rail *tab, int size, struct Rail rail){
  int towns_visited_left[AI_1.nb_towns+1];
  int towns_visited_right[AI_1.nb_towns+1];
  for(int i=1; i<AI_1.nb_towns+1; i++){
      towns_visited_left[i] = 0;
      towns_visited_right[i] = 0;
  }
  fill_tab_acyclic(tab,size,towns_visited_left,rail.town1);
  fill_tab_acyclic(tab,size,towns_visited_right,rail.town2);
  int acyclic = 1;
  for(int i=1; i<AI_1.nb_towns+1; i++){
    if(towns_visited_left[i]==1 && towns_visited_right[i]==1)
      acyclic = 0;
  } 
  return acyclic;
} 




void fill_tab_rail_free_in_ACM(struct Rail *tab,int *acm_tab_indices, int size, int *tab_towns_to_fill, int *tab_rails_to_fill, int current_town){
  tab_towns_to_fill[current_town] = 1;
  for(int i=0; i<size; i++){
    if(tab[i].town1==current_town && tab_towns_to_fill[tab[i].town2]==0){
      struct My_Rail *my_rail = give_my_rail(acm_tab_indices[i], AI_1_matrix, AI_1.rails);
      if(is_rail_free(my_rail) || who_on_rail(my_rail)==AI_1.id_player){
	tab_rails_to_fill[acm_tab_indices[i]] = 1;
	fill_tab_rail_free_in_ACM(tab,acm_tab_indices,size,tab_towns_to_fill,tab_rails_to_fill,tab[i].town2);
      }
    }
    if(tab[i].town2==current_town && tab_towns_to_fill[tab[i].town1]==0){
      struct My_Rail *my_rail = give_my_rail(acm_tab_indices[i], AI_1_matrix, AI_1.rails);
      if(is_rail_free(my_rail) || who_on_rail(my_rail)==AI_1.id_player){
	tab_rails_to_fill[acm_tab_indices[i]] = 1;
	fill_tab_rail_free_in_ACM(tab,acm_tab_indices,size,tab_towns_to_fill,tab_rails_to_fill,tab[i].town1);
      }
    }
  }
}


int rail_free_in_ACM(struct Rail *acm, int *acm_tab_indices, int size, int town1, int town2){
  int towns_visited_left[AI_1.nb_towns+1];
  int towns_visited_right[AI_1.nb_towns+1];
  int rails_visited_left[AI_1.nb_rails];
  int rails_visited_right[AI_1.nb_rails];
  for(int i=0; i<AI_1.nb_towns+1; i++){
      towns_visited_left[i] = 0;
      towns_visited_right[i] = 0;
  }
  for(int i=0; i<AI_1.nb_rails; i++){
    rails_visited_left[i] = 0;
    rails_visited_right[i] = 0;
  }
  fill_tab_rail_free_in_ACM(acm,acm_tab_indices,size,towns_visited_left,rails_visited_left,town1);
  fill_tab_rail_free_in_ACM(acm,acm_tab_indices,size,towns_visited_right,rails_visited_right,town2);
  
  int rail_free_for_objective = -1;
  for(int i=0; i<AI_1.nb_rails; i++){
    if(rails_visited_left[i]==1 && rails_visited_right[i]==1){
      if(AI_1.rails[i].length <= AI_1.nb_remaining_wagons[AI_1.id_player]){ // if enough wagons to build this rail
	if(AI_1.rails[i].color == 0){ // if rail is of color neutral
	  if(AI_1.personal_wagon_cards[0] >= AI_1.rails[i].length) // if enough color neutral
	    rail_free_for_objective = i;
	}
	else{ // if rail is not of color neutral
	  if(AI_1.personal_wagon_cards[0]+AI_1.personal_wagon_cards[AI_1.rails[i].color] >= AI_1.rails[i].length) // if enough color neutral + color needed
	    rail_free_for_objective = i;
	}
      }
    }
  } 
  return rail_free_for_objective; // Returns -1 if no rail free found; indice of rail otherwise
} 













int AI_1_init_player(int id, int nb_players, int nb_towns, int nb_rails, struct Rail *rails, int nb_initial_wagons, int nb_obj, struct Objective *objs){
    // Storage of all the informations
    AI_1.id_player = id;
    AI_1.points = 0;
    AI_1.nb_players = nb_players;
    AI_1.nb_towns = nb_towns;

    AI_1.nb_remaining_wagons = malloc(nb_players*sizeof(int));
    for(int i=0; i<nb_players; i++)
      AI_1.nb_remaining_wagons[i] = nb_initial_wagons;


    AI_1.nb_remaining_wagon_cards = malloc(nb_players*sizeof(int));
    for(int i=0; i<nb_players; i++){
      AI_1.nb_remaining_wagon_cards[i] = 0;
    }


    AI_1.nb_remaining_objective_cards = malloc(nb_players*sizeof(int));
    for(int i=0; i<nb_players; i++){
      AI_1.nb_remaining_objective_cards[i] = 0;
    }


    AI_1.nb_rails = nb_rails;
    AI_1.rails = malloc(nb_rails*sizeof(struct Rail));
    for(int i=0; i<nb_rails; i++){
      AI_1.rails[i].town1 = rails[i].town1;
      AI_1.rails[i].town2 = rails[i].town2;
      AI_1.rails[i].length = rails[i].length;
      AI_1.rails[i].color = rails[i].color;
    }


    AI_1.total_nb_obj = nb_obj;
    AI_1.objs = malloc(nb_obj*sizeof(struct Objective));
    for(int i=0; i<nb_obj; i++){
      AI_1.objs[i].town1 = objs[i].town1;
      AI_1.objs[i].town2 = objs[i].town2;
      AI_1.objs[i].points = objs[i].points;
    }


    AI_1.nb_personal_objs = 0;
    AI_1.nb_objs_completed = 0;
    AI_1.personal_objs = malloc(nb_obj*sizeof(int));
    for(int i=0; i<nb_obj; i++)
      AI_1.personal_objs[i] = -1;
  // size of AI_1.personal_objs = total number of objs
  // but has only AI_1.nb_personal_objs


    int *col = malloc(sizeof(int)); //col must be used in the function colors
    AI_1.nb_colors = colors(AI_1.rails, AI_1.nb_rails, col);
    free(col); //col not usefull so needs to be freed

    AI_1.nb_personal_wagon_cards = 0;
    AI_1.personal_wagon_cards = malloc(AI_1.nb_colors*sizeof(int));
    for(int i=0; i<AI_1.nb_colors; i++)
      AI_1.personal_wagon_cards[i] = 0;


    AI_1.nb_objectives_chosen = 0;
    AI_1.draw_chosen = 0;


    // Initialisation of the personal matrix
    AI_1_matrix = init_map(nb_towns, rails, nb_rails);

    return 1;
}






struct Action AI_1_play_turn(int *used_wagons, int *cards_in_hand, int *objectives, int nb_new_rails, struct New_rail *changes, int *new_obj, int *cards){

  actualise_all_parameters_received(used_wagons, cards_in_hand, objectives, nb_new_rails, changes, new_obj, cards);

  
  /*
   * while objectives not completed: build a rail for objectives if can, else take cards_wagons 
   * else (objectives all completed): choose maximal length rail and build if can, else take cards_wagons
   */
  struct Action action;
  
  if(AI_1.nb_objs_completed != AI_1.nb_personal_objs){ // if objectives not completed

    // Construction of the ACM tabular
    int size_accessible_rails = give_size_accessible_rails(AI_1.rails, AI_1.nb_rails, AI_1.id_player);
    int kept_indices[AI_1.nb_rails]; 
    for(int i=0; i<AI_1.nb_rails; i++)
      kept_indices[i] = 0;
    struct Rail tab[size_accessible_rails]; // Tabular of the rails kept (already owned or still accessible)
    accessible_rails(AI_1.rails, kept_indices, AI_1.nb_rails, AI_1.id_player);
    int l = 0;
    for(int i=0; i<AI_1.nb_rails; i++){
      if(kept_indices[i]==1){
	tab[l].town1 = AI_1.rails[i].town1;
	tab[l].town2 = AI_1.rails[i].town2;
	tab[l].length = AI_1.rails[i].length;
	tab[l].color = AI_1.rails[i].color;
	l++;
      }
    } // "tab" is only composed of free rails and rails owned bu the player himself
    
    int tab_indices[size_accessible_rails];
    int k=0;
    for(int i=0; i<AI_1.nb_rails; i++){
      if(kept_indices[i]==1){
	tab_indices[k] = i;
	k++;
      }
    } // "tab_indices" is composed of the indices of the struct Rail(s) of "tab"
    
    sort_length(tab, tab_indices, size_accessible_rails);
    struct Rail ACM_tab[AI_1.nb_rails]; // ACM tab
    int ACM_tab_indices[AI_1.nb_rails]; // ACM tab indices
    int size_ACM_tab = 0;
    for(int i=0; i<size_accessible_rails; i++){
      if(acyclic(ACM_tab, size_ACM_tab, tab[i])){
	ACM_tab[size_ACM_tab].town1 = tab[i].town1;
	ACM_tab[size_ACM_tab].town2 = tab[i].town2;
	ACM_tab[size_ACM_tab].length = tab[i].length;
	ACM_tab[size_ACM_tab].color = tab[i].color;
	ACM_tab_indices[size_ACM_tab] = tab_indices[i];
	size_ACM_tab++;
      }
    }
    
    
    //Find a way in the ACM tabular to complete the objective
    
    int start_town = (AI_1.objs[AI_1.personal_objs[AI_1.nb_objs_completed]]).town1;
    int end_town = (AI_1.objs[AI_1.personal_objs[AI_1.nb_objs_completed]]).town2;

    int indice_of_rail_wanted = rail_free_in_ACM(ACM_tab, ACM_tab_indices, size_ACM_tab, start_town, end_town);

    if(indice_of_rail_wanted > -1){ // build a rail
      action.type = BUILD;
      action.rail = indice_of_rail_wanted;
      action.color = 0; // unused but still initialised
      action.color = 0; // unused but still initialised
      AI_1.nb_objectives_chosen = 0;
      AI_1.draw_chosen = 0;
    }
    else{ // draw wagon_cards
      action.type = DRAW;
      action.rail = 0; //unused but still initialised
      action.color = AI_1.rails[indice_of_rail_wanted].color; 
      action.color = AI_1.rails[indice_of_rail_wanted].color;  
      AI_1.nb_objectives_chosen = 0;
      AI_1.draw_chosen = 1;
    }
  }
  
  else{ // if objectives all completed: choose maximal length rail and build if can, else take cards_wagons

    int maximal_length_town = 0;
    int maximal_length = AI_1.rails[0].length;
    int color = 0;
    for(int i=0; i<AI_1.nb_rails; i++){
      struct My_Rail *my_rail = give_my_rail(i, AI_1_matrix, AI_1.rails);
      if(is_rail_free(my_rail) && my_rail->rail->length > maximal_length){
	maximal_length_town = i;
	maximal_length = my_rail->rail->length;
	color = my_rail->rail->color;
      }
    }
    if(AI_1.nb_personal_wagon_cards >= maximal_length && color!=0 && (AI_1.personal_wagon_cards[color]+AI_1.personal_wagon_cards[0])>=maximal_length){
      action.type = BUILD;
      action.rail = maximal_length_town;
      action.color = 0; // unuseful item but still initialised
      action.color2 = 0; // unuseful item but still initialised
      AI_1.nb_objectives_chosen = 0;
      AI_1.draw_chosen = 0;
    }
    if(AI_1.nb_personal_wagon_cards >= maximal_length && color==0 && AI_1.personal_wagon_cards[0]>=maximal_length){
      action.type = BUILD;
      action.rail = maximal_length_town;
      action.color = 0; // unuseful item but still initialised
      action.color2 = 0; // unuseful item but still initialised
      AI_1.nb_objectives_chosen = 0;
      AI_1.draw_chosen = 0;
    }
    else{
      action.type = DRAW;
      action.rail = 0; // unuseful item but still initialised
      action.color = color; 
      action.color2 = color;
      AI_1.nb_objectives_chosen = 0;
      AI_1.draw_chosen = 1;
    }
  }
  return action;
}





int min_point_objs(int nb, int *objs, int *tab){
    int i=0;
    while (tab[i] == 1 && i<nb)
        i++;
    for (int k=i;k<nb;k++){
        if (AI_1.objs[objs[k]].points < AI_1.objs[objs[i]].points && tab[k] == 0)
            i=k;
    }
    return i;
}



int *AI_1_choose_objective(int nb, int *objs, int min){
    int k=0;
    int i=0;
    int *tab = malloc(nb * sizeof(int));
    for (i=0;i<nb;i++)
        tab[i]=0;
    while (k<min){
        //chooses minimal point objective
        AI_1.nb_personal_objs++;
        i = min_point_objs(nb, objs, tab);
        tab[i] = 1;
        k++;
    }
    AI_1.nb_objectives_chosen = min;
    return tab;
}





int AI_1_free_player(){
    free(AI_1.nb_remaining_wagons);
    free(AI_1.nb_remaining_wagon_cards);
    free(AI_1.nb_remaining_objective_cards);
    free(AI_1.rails);
    free(AI_1.objs);
    free(AI_1.personal_objs);
    free(AI_1.personal_wagon_cards);
    return 1;
}

