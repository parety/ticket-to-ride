#ifndef AI_3_H
#define AI_3_H


/*!
 * \brief init_player
 * Communication functions (between the server and the clients)
 *
 * objs=tabular of all the objectives existing
 * indices of each element in the tabular "objs" are the identifiers of each objective
 * rails=tabular of all the rails existing
 * indices of each element in the tabuler "rails" are the identifiers of each rail
 * \param id
 * \param nb_player
 * \param nb_towns
 * \param nb_rails
 * \param rails
 * \param nb_wagons
 * \param nb_obj
 * \param objs
 * \return
 */
int AI_3_init_player(int id, int nb_player, int nb_towns, int nb_rails, struct Rail *rails, int nb_wagons, int nb_obj, struct Objective *objs);

/*!
 * \brief play_turn
 *
 * used_wagons>=0 ; cards_in_hand>=0 if DRAW, <=0 if BUILD ; objectives>=0 ; cards pointing to the array of colors
 * \param used_wagons
 * \param cards_in_hand
 * \param objectives
 * \param nb_new_rails
 * \param changes
 * \param new_obj
 * \param cards
 * \return
 */

struct Action AI_3_play_turn(int *used_wagons, int *cards_in_hand, int *objectives, int nb_new_rails, struct New_rail *changes, int *new_obj, int *cards);

/*!
 * \brief choose_objective
 *
 * min=minimum number of objectives that a player has to keep at the beginning; nb=number of objectives proposed; objs=tabular of "nb" objectives
 * if the player doesn't choose at least "min" objectives, the server gives him all the objectives of the tabular "objs"
 * \param nb
 * \param objs
 * \param min
 * Returns a boolean tab of size nb (to say which objectives are chosen in the tabular "objs")
 * \return
 */
int *AI_3_choose_objective(int nb, int *objs, int min);
//
//
//

/*!
 * \brief free_player
 * \return
 */
int AI_3_free_player();

#endif
